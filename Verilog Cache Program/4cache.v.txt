/*
* File: 4cache.v
* Author: Matthew Yakubek
* Modification: Completed 3/14/2021 - Matthew Yakubek
* Modules:
*	4cache- Module that reads given file, displays hits and misses given for 3 configurations
*	directmap - Returns hit/miss under direct map schema, keeps cache of tags
* 	twoset - Returns hit/miss under two set associative schema using LRU, keeps cache of tags
*	fullyassoc - Returns hit/miss under fully associative schema using LRU, keeps cache where tags are input
*/



/*
* Module: 4cache - Module testbench that reads given file, displays hits and misses given for 3 configurations
* Author: Matthew Yakubek
* Modification: Completed 3/14/2021 - Matthew Yakubek
* Ports:
*In:
*	filemem- I/P reg: 		Register reads in memory file and stores 100 elements of 4 bits
*	return - I/P reg: 		stores a hit or miss return from modules
*Out:
*	directmap -O/P wire: 	connect ports to test directmap
*	twoset	  -O/P wire: 	connect ports to test twoset 
*	fullyassoc-O/P wire:  	connect ports to test fullyassoc cache
*	i		  -O/P reg: 	counter to loop and supply output to cache modules
*/
module cache;	//establish name of the module
	
	//*** Declare registers for memory & module traversal + return
	reg[3:0] filemem[0:99]; //create 100 4 bit registers (100 values in trace)
	reg[7:0] i;		//i to loop through the for loop
	reg[3:0] return;	//return values from the modules (hit or miss)
	
	
	//*** Registers to hold misses and hits ***
	//8 bit registers to store the number of hits and misses for directmap
	reg[7:0] directmaphits;
	reg[7:0] directmapmisses;
	
	//8 bit registers to store the number of hits and misses for two set associative
	reg[7:0] twosethits;
	reg[7:0] twosetmisses;

	//8 bit registers to store the number of hits and misses for fully associative
	reg[7:0] fullyassochits;
	reg[7:0] fullyassocmisses;
	
	
	//*** Connecting ports to the three modules ***
	wire directmap;
	wire twoset;
	wire fullyassoc;
	
	//***instantiate the three modules with input memory and counter i ***
	directmap d1(filemem[i], directmap);
	twoset t1(filemem[i], twoset);
	fullyassoc f1(filemem[i], fullyassoc);


	//***Start of testbench Activities***
	initial begin
		
		//***initialize hit and miss variables***
		directmaphits = 0;
		directmapmisses = 0;
		twosethits = 0;
		twosetmisses = 0;
		fullyassochits = 0;
		fullyassocmisses = 0;
		
		//***read in the memory file into filemem (Trace has 100 elements)***
		$readmemh("c:/Users/Matthew/Desktop/4341 Program #2/trace.txt", filemem);
		
		
		//***Main Test Loop, get and display all hits/misses with module calls ***
		for(i = 0; i < 100; i = i+1)	begin
				#100		//delay for 100 ticks (failsafe termination)
			if(filemem[i])	begin		//begin module calls with input
			
			
				//***call directmap module, increment based on hit/miss***
				if(directmap)				
					directmaphits = directmaphits +1;
				else
					directmapmisses = directmapmisses+1;
				
				
				//***call twoset module, increment based on hit/miss***
				if(twoset)
					twosethits = twosethits + 1;
				else
					twosetmisses = twosetmisses +1;
						
				//***call fully associative module, increment based on hit/miss***
				if(fullyassoc)
					fullyassochits = fullyassochits + 1;
				else
					fullyassocmisses = fullyassocmisses + 1;
				
			end	//end module calls
				//###DEBUG - print output for every input of given module (can use any of the three)
				//$display("in = %2d out= %1b", filemem[i], directmap);		//prints in = # out = # for all 100 inputs
		end	//end for loop

		//***Print misses and hits for the three configurations***
		$display("Direct map misses = %1d Direct map hits = %1d", directmapmisses, directmaphits); 
		$display("Two Set misses = %1d Two Set hits = %1d", twosetmisses, twosethits); 
		$display("Fully Associative misses = %1d Fully Associative hits = %1d", fullyassocmisses, fullyassochits); 

	end		//end of testbench begin loop
endmodule //end of code for module



/*
* Module: directmap - Returns hit/miss under direct map schema, keeps cache of tags
* Author: Matthew Yakubek
* Modification: Completed 3/14/2021 - Matthew Yakubek
* Ports:
*In:
*	in- I/P reg: 			 	 Gets a 4 bit input to store in cache
*Out:
*	out-O/P wire: 	 			 1 bit return for hit(1) or miss(1) in cache
*/
module directmap(in, out);
	input [3:0] in;			//4 bit input 0-15
	output [0:0] out;		//return if the value is a hit or a miss
	reg [3:0]cache[0:3];		//empty cache of 4 elements 
	reg [0:0] return;		//register to store hit or miss to give to output
	reg [3:0] tag;			//tag associated with 0-15 inputs that designate index
	reg [3:0] index;		//where in cache index the input should be stored
	
	//***initialize the return register and the caches***
	initial begin
		tag = -1;
		index = -1;
		return = 0;
		cache[0] = -1;
		cache[1] = -1;
		cache[2] = -1;
		cache[3] = -1;
	end


	//***Case statement that will find cache index based on address input, update cache, and return hit or miss***
	always @* begin			//eval sensitivity changes
		case(in)			//Cases based on input
		4'b0001: 			//address 1, tag 0, index 1
			begin			//set the correct tag and index for the location (calculate cache hit/miss below case statements)
				tag = 0;	
				index = 1;
			end
			
			
		//The following cases follow the same logic with different tags and indexes corresponding to a direct map schema
		4'b0010: 		//address 2, tag 0, index 2
			begin
				tag = 0;		
				index = 2;
			end
		4'b0011: 		//address 3, tag 0, index 3
			begin
				tag = 0;		
				index = 3;
			end
		4'b0100: 		//address 4, tag 1, index 0
			begin
				tag = 1;		
				index = 0;
			end
		4'b0101: 		//address 5, tag 1, index 1
			begin
				tag = 1;		
				index = 1;
			end
		4'b0110: 		//address 6, tag 1, index 2
			begin
				tag = 1;		
				index = 2;
			end
		4'b0111: 		//address 7, tag 1, index 3
			begin
				tag = 1;		
				index = 3;
			end
		4'b1000: 		//address 8, tag 2, index 0
			begin
				tag = 2;		
				index = 0;
			end
		4'b1001: 		//address 9, tag 2, index 1
			begin
				tag = 2;		
				index = 1;
			end
		4'b1010: 		//address 10, tag 2, index 2
			begin
				tag = 2;		
				index = 2;
			end
		4'b1011: 		//address 11, tag 2, index 3
			begin
				tag = 2;		
				index = 3;
			end
		4'b1100: 		//address 12, tag 3, index 0
			begin
				tag = 3;		
				index = 0;
			end
		4'b1101: 		//address 13, tag 3, index 1
			begin
				tag = 3;		
				index = 1;
			end
		4'b1110: 		//address 14, tag 3, index 2
			begin
				tag = 3;		
				index = 2;
			end
		4'b1111: 		//address 15, tag 3, index 3
			begin
				tag = 3;		
				index = 3;
			end
		default: return = -1;	//if not a valid num return error val
		endcase		//endcase for hit/miss calc
		
		
		//***Calculate and return hit/miss based on input***
		if(cache[index] != tag)begin	//if the cache at the index is no correct		
			return = 0;					//return a miss
			cache[index] = tag; 		//store the tag in the index
		end else begin					//if the cache at the index is correct
			return = 1; 				//store a hit
		end
	end			//end of always loop

	wire out = return;	//set the output to the hit or miss boolean value return
	
endmodule 		//end of directmap module



/*
* Module: fullyassoc - Returns hit/miss under fully associative schema using LRU, keeps cache where tags are input
* Author: Matthew Yakubek
* Modification: Completed 3/14/2021 - Matthew Yakubek
* Ports:
*In:
*	in- I/P reg: 			 	 Gets a 4 bit input to store in cache
*Out:
*	out-O/P wire: 	 			 1 bit return for hit(1) or miss(1) in cache
*/
module fullyassoc(in, out);
	input [3:0] in;			//4 bit input 0-15
	output [0:0] out;		//return if the value is a hit or a miss
	reg [3:0]cache[0:3];	//empty cache of 4 elements 
	reg [0:0] return;		//register to store hit or miss to give to output
	reg [3:0] lru[0:3];		//LRU of 4 elements and 4 bits
	reg [3:0] i;			//counter for looping
	reg [3:0] temp; 		//to hold values to shift LRU
	reg [3:0] hitloc;		//store cache location of hit
	reg [3:0] lruloc;		//location of the cache hit in LRU
	//NOTE: no need for tag since we are using the same value as input
	
	//***initialize the return register and the caches***
	initial begin
		hitloc = 0;
		temp = 0;
		return = -1;
		cache[0] = -1;
		cache[1] = -1;
		cache[2] = -1;
		cache[3] = -1;
		i = 0;
		lru[0] = 0;
		lru[1] = 1;
		lru[2] = 2;
		lru[3] = 3;
	end
	
	//*** Check index 0-3 for hit/miss, then update LRU and cache
	always @* begin
		return = 0;		//default return to miss, change to hit if found
		
		//*** Loop and check if input is a hit or miss ***
		for(i = 0; i < 3; i = i+1)begin
			if(in == cache[i]) begin
				return = 1;
				hitloc = i;
			end
		end	//end of for loop
		
		
		//*** If a miss, store at LRU 3 and move rest of elements down ***
		if(return == 0) begin;
			cache[lru[0]] = in; //Store input into cache at LRU location
			
			//Shift elements down [0][1][2][3] -> [1][2][3][0] then put new into [0]
			temp = lru[0];
			lru[0] = lru[1];
			lru[1] = lru[2];
			lru[2] = lru[3];
			lru[3] = temp;
		end	//end of miss shifter
		
		//*** If a hit, loop and find index location, then shift LRU, and update in cache
		if(return == 1) begin
			
			//Find the location of the index hit in LRU and store in lruloc
			for(i = 0; i < 3; i = i+1)begin
				if(lru[i] == hitloc)
					lruloc = i;
			end
			
			
			//***given location, move to back of LRU [3] and shift other elements down***
			temp = lru[lruloc];							//temp value, will be shifted over and moved to end of LRU
			for(i = lruloc; i < 2; i = i + 1) begin		//starting at the LRU location, start shifting
				lru[i] = lru[i+1];
			end
			lru[3] = temp;								//add value on the end of the lru (just hit)
		end	//end of hit shifter
	end	//end of always 
	
	wire out = return;	//output hit or a miss
	
endmodule	//end of fully associative module



/*
* Module: twoset - Returns hit/miss under two set associative schema using LRU, keeps cache of tags
* Author: Matthew Yakubek
* Modification: Completed 3/14/2021 - Matthew Yakubek
* Ports:
*In:
*	in- I/P reg: 			 	 Gets a 4 bit input to store in cache
*Out:
*	out-O/P wire: 	 			 1 bit return for hit(1) or miss(1) in cache
*/
module twoset(in, out);
	input [3:0] in;			//4 bit input 0-15
	output [0:0] out;		//return if the value is a hit or a miss
	reg [3:0]cache[0:3];	//empty cache of 4 elements 
	reg [0:0] return;		//register to store hit or miss to give to output
	reg [1:0] lru[0:1];		//lru cache (lower and upper element with boolean vals)
	reg [3:0] tag;			//4 bit tag (what is stored in index for each num)
	reg [3:0] index;		//index (location in cache)
	reg [1:0] indexbool;	//boolean for LRU management (0 is index 0-1, 1 is index 2-3)
	
	
	//***initialize the variables to -1 (error val) and lru to defaults***
	initial begin
		indexbool = -1;
		tag = -1;
		index = -1;
		return = -1;
		cache[0] = -1;
		cache[1] = -1;
		cache[2] = -1;
		cache[3] = -1;
		lru[0] = 0;
		lru[1] = 0;
	end

	//***find cache index based on address input, update cache, and return hit or miss***
	always @* begin
	
		//*** Case Statement marks index and tag based on input value ***
		case(in)
		4'b0001: //address 1, tag 0, index 0 or 1
			begin	
				tag = 0;
				indexbool = 0;
			end
			
			
		//The following cases follow the same logic with different tags and indexes corresponding to a two set schema
		4'b0010: 		//address 2, tag 0, index 2 or 3
			begin	
				tag = 0;
				indexbool = 1;
			end
		4'b0011: 		//address 3, tag 1, index 2 or 3
			begin	
				tag = 1;
				indexbool = 1;
			end
		4'b0100: 		//address 4, tag 1, index 0 or 1
			begin	
				tag = 1;
				indexbool = 0;
			end
		4'b0101: 		//address 5, tag 2, index 0 or 1
			begin	
				tag = 2;
				indexbool = 0;
			end
		4'b0110: 		//address 6, tag 2, index 2 or 3
			begin	
				tag = 2;
				indexbool = 1;
			end
		4'b0111: 		//address 7, tag 3, index 2 or 3
			begin	
				tag = 3;
				indexbool = 1;
			end
		4'b1000: 		//address 8, tag 3, index 0 or 1
			begin	
				tag = 3;
				indexbool = 0;
			end
		4'b1001: 		//address 9, tag 4, index 0 or 1
			begin	
				tag = 4;
				indexbool = 0;
			end
		4'b1010: 		//address 10, tag 4, index 2 or 3
			begin	
				tag = 4;
				indexbool = 1;
			end
		4'b1011: 		//address 11, tag 5, index 2 or 3
			begin	
				tag = 5;
				indexbool = 1;
			end
		4'b1100: 		//address 12, tag 5, index 0 or 1
			begin	
				tag = 5;
				indexbool = 0;
			end
		4'b1101: 		//address 13, tag 6, index 0 or 1
			begin	
				tag = 6;
				indexbool = 0;
			end
		4'b1110: 		//address 14, tag 6, index 2 or 3
			begin	
				tag = 6;
				indexbool = 1;
			end
		4'b1111: 		//address 15, tag 7, index 2 or 3
			begin	
				tag = 7;
				indexbool = 1;
			end
		default: return = -1;	//if not a valid num return error val
		endcase		//endcase for hit/miss calc
		
		
		
		//***based on input set index to 0 or 1***
		if(indexbool != 0) begin	//index from upper set 2-3
			index = 2;
		end else begin				//index from lower set 0-1
			index = 0;
		end
		
		
		
		//***Calculates and returns hit/miss, checks set (0-1) or (2-3) and counts hit or replaces using LRU and counts miss
		if(cache[index] != tag)begin				//check first index for tag
			index = index + 1;						//increment to the other tag if not in first
			if(cache[index] != tag) begin			//check second index for tag
				
				//***Tag not in either index, mark miss, update LRU and cache***
				if(index != 3) begin			//***For first set of index (0-1)***
					if(lru[0] != 0) begin	//lru is 1 (replace tag/element at 1 location)
						cache[1] = tag;		//set cache at index 1 to tag
						lru[0] = 0;			//set lru to the other element
						return = 0;			//return miss
						
					end else begin			//lru is 0 (replace tag/element at 0 location)
						cache[0] = tag;		//set cache at index 0 to tag 0
						lru[0] = 1;			//set lru to the other element
						return = 0;			//return miss
					end
				end else begin				//***For second set of index (2-3)***
					if(lru[1] != 0) begin	//LRU = 1
						cache[3] = tag;		//store tag in cache (3)
						lru[1] = 0;			//update LRU
						return = 0;			//return miss
						
					end else begin			//LRU = 0
						cache[2] = tag;		//store tag in cache (2)
						lru[1] = 1;			//update LRU 
						return = 0;			//return miss
					end
				end	//*** End of cache/LRU update ***
			
			
			//*** Tag is found in the second index ***
			end else begin
				return = 1;				//return hit
				if(index != 3) begin	//If looking at set 0-1
					lru[0] = 0; 		//update LRU to 1st location
				end else begin			//If looking at set 2-3
					lru[1] = 0;			//update LRU to 1st location
				end
			end			
			
			
			
		//*** Tag is found in the first index ***
		end else begin		
			return = 1;				//return a hit
			if(index != 3) begin	//If looking at set 0-1
				lru[0] = 1; 		//update LRU to 2nd location
			end else begin			//If looking at set 2-3
				lru[1] = 1;			//update LRU to 2nd location
			end
		end	
	end			//end of always loop

	wire out = return;	//set output equal to return value (0 - miss, 1 - hit)

endmodule